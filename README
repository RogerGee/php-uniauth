php-uniauth - v1.0.0
--------------------------------------------------------------------------------
This project provides a PHP extension and Linux daemon for performing universal
authentication among different sites running on the same host (i.e. different
domains that resolve to the same physical host). The implementation consists of
an extension that provides PHP userspace an interface for connecting with the
uniauth daemon (also provided in this repository).

Primary author:
    Roger Gee <rpg11a@acu.edu>

--------------------------------------------------------------------------------
The Uniauth Flow

Uniauth is a redirect flow for implementing single sign-on for sites running on
the same host. Unlike other single sign-on flows it does not transmit user
information in the Web requests (e.g. a token or user credentials). Instead it
transmits a cookie ID to identify pending authentication requests. Login status
information (i.e. a user ID and name) are transmitted locally on the server over
a domain socket connection with the uniauth daemon.

The daemon maintains a simple database of uniauth records. These records hold
user, session and redirect information used in the flow. Records are keyed by a
cookie ID. If the userspace script does not provide a session key ID, the PHP
session ID will be used instead (this means you must have already called
session_start()). The extension does not actually manipulate the PHP session
data itself. Instead it uses the session configuration (ID and expiration) to
track its own uniauth records. This frees PHP userspace from having to track
this information in its session. If a full-blown session is not required, then a
cookie can be used instead. The cookie's expiration should be set to align with
the session max lifetime, which is used to set the uniauth session expiration.

Their are two roles in the flow taken by applications:

    1. registrar
    2. applicant

The registrar endpoint provides a means to collect user credentials and
authenticate users. It registers the collected user ID and name (along with a
display name) to a uniauth session ID. Internally, this uniauth session is
shared among all sessions authenticating to the registrar endpoint in question.

The applicant endpoint queries authentication status and, if none is found,
redirects to the registrar endpoint for authentication. Upon the user
successfully providing credentials, the registrar will transfer authentication
information from its session into the applicant session. The registrar then
redirects the user-agent back to the applicant site, upon which event the
applicant queries authentication status and finds that it exists.

--------------------------------------------------------------------------------
PHP Userspace Functions Overview

Applicant Endpoint:

The core function used by applicants is uniauth(), which checks to see if a user
session has been associated with the current session or provied cookie id. If
not, it redirects the user-agent to the specified authentication endpoint. If an
ID is associated, the function returns an associative array containing the 'id',
'user' and 'display' records for the entry.

A call to uniauth() is all that is required for applicants.

Registrar Endpoint:

When calling a registrar endpoint, one of two things can happen.

    1. There is no uniauth session for the registrar. In this case a session
    must be created and authenticated. The registrar endpoitn calls
    uniauth_apply() to begin this process. This function takes the query
    parameter passed from the applicant's call to uniauth() and stores it in a
    new uniauth session. It must set a cookie or use the PHP session to track
    this uniauth session.

    Now the registrar can present a login form or use HTTP basic/digest auth to
    collect and verify user credentials. Upon successful authentication, the
    uniauth_register() function can be called with the correct information. This
    updates the registrar uniauth session with the provided information.

    Finally, the uniauth_transfer() function is called to transfer the registrar
    session into the applicant session. Internally this updates the applicant
    record to point to the registrar record. This function will automatically
    redirect the user-agent back to the original, applicant endpoint

The uniauth_check() function is provided for the registrar endpoint so that it
can check if a valid session exists. This should be done before calling
uniauth_apply(). If 'true' is returned, then the registrar can skip to calling
uniauth_transfer().

Logging Out:

To explictly invalidate a uniauth session, the uniauth_purge() API is
employed. This simply invalidates the session ID so the user login status is
void. Note that this will log out all services (i.e. vhosts) that are using the
session. The session record is not technically freed until it expires
naturally. This means the same uniauth IDs can be used again in future
registration attempts.

--------------------------------------------------------------------------------
PHP Userspace Functions Detail

    uniauth()
    uniauth_check()
    uniauth_apply()
    uniauth_register()
    uniauth_transfer()
    uniauth_purge()

--------------------------------------------------------------------------------
Limitations

Since the registration session points to the same record as any other session,
only one service can be registered at a time. If a race condition were to happen
where two clients go for the registrar endpoint at the same time, then only one
could actually complete. Thankfully this isn't really an issue since a typical
user signs in to different services separately.
